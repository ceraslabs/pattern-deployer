{
  "apiVersion": "0.2",
  "apis": [
    {
      "description": "Get a list of topologies",
      "operations": [
        {
          "deprecated": false,
          "errorResponses": [
            {
              "code": 401,
              "reason": "user haven't logined"
            },
            {
              "code": 403,
              "reason": "user doesnot have permission for this operation"
            },
            {
              "code": 500,
              "reason": "some weird error occurs, possibly due to bug(s)"
            }
          ],
          "httpMethod": "GET",
          "nickname": "getTopologies",
          "responseClass": "Topologies",
          "summary": "Get a list of topologies"
        }
      ],
      "path": "/topologies"
    },
    {
      "description": "Create a new topologies definition",
      "operations": [
        {
          "deprecated": false,
          "errorResponses": [
            {
              "code": 400,
              "reason": "user provided invalid parameter(s)"
            },
            {
              "code": 401,
              "reason": "user haven't logined"
            },
            {
              "code": 403,
              "reason": "user doesnot have permission for this operation"
            },
            {
              "code": 500,
              "reason": "some weird error occurs, possibly due to bug(s)"
            }
          ],
          "httpMethod": "POST",
          "nickname": "createTopology",
          "notes": "User can upload an XML file which should contain an XML document to define the topology. Alternatively, user can send the XML definition by plain text through 'definition' parameter. Or, user can defer the topology definition by just provide the name and description.",
          "parameters": [
            {
              "allowMultiple": false,
              "dataType": "file",
              "description": "This file should be an XML document to describe the topology",
              "name": "file",
              "paramType": "body",
              "required": false
            },
            {
              "allowMultiple": false,
              "dataType": "string",
              "description": "This file should be an XML document to describe the topology",
              "name": "definition",
              "paramType": "body",
              "required": false
            },
            {
              "allowMultiple": false,
              "dataType": "string",
              "description": "The name of the topology to be created.",
              "name": "name",
              "paramType": "query",
              "required": false
            },
            {
              "allowMultiple": false,
              "dataType": "string",
              "description": "The description of the topology to be created",
              "name": "description",
              "paramType": "query",
              "required": false
            }
          ],
          "responseClass": "Topology",
          "summary": "Create a new topologies definition"
        }
      ],
      "path": "/topologies"
    },
    {
      "description": "Get the topology definition with id",
      "operations": [
        {
          "deprecated": false,
          "errorResponses": [
            {
              "code": 400,
              "reason": "user provided invalid parameter(s)"
            },
            {
              "code": 401,
              "reason": "user haven't logined"
            },
            {
              "code": 403,
              "reason": "user doesnot have permission for this operation"
            },
            {
              "code": 500,
              "reason": "some weird error occurs, possibly due to bug(s)"
            }
          ],
          "httpMethod": "GET",
          "nickname": "getTopologyById",
          "parameters": [
            {
              "allowMultiple": false,
              "dataType": "int",
              "description": "The unique id of topology",
              "name": "id",
              "paramType": "path",
              "required": true
            }
          ],
          "responseClass": "Topology",
          "summary": "Get the topology definition with id"
        }
      ],
      "path": "/topologies/{id}"
    },
    {
      "description": "Delete the topology definition with id",
      "operations": [
        {
          "deprecated": false,
          "errorResponses": [
            {
              "code": 400,
              "reason": "user provided invalid parameter(s)"
            },
            {
              "code": 401,
              "reason": "user haven't logined"
            },
            {
              "code": 403,
              "reason": "user doesnot have permission for this operation"
            },
            {
              "code": 500,
              "reason": "some weird error occurs, possibly due to bug(s)"
            }
          ],
          "httpMethod": "DELETE",
          "nickname": "deleteTopologyById",
          "parameters": [
            {
              "allowMultiple": false,
              "dataType": "int",
              "description": "The unique id of topology",
              "name": "id",
              "paramType": "path",
              "required": true
            }
          ],
          "responseClass": "Topologies",
          "summary": "Delete the topology definition with id"
        }
      ],
      "path": "/topologies/{id}"
    },
    {
      "description": "Modify the topology.",
      "operations": [
        {
          "deprecated": false,
          "errorResponses": [
            {
              "code": 400,
              "reason": "user provided invalid parameter(s)"
            },
            {
              "code": 401,
              "reason": "user haven't logined"
            },
            {
              "code": 403,
              "reason": "user doesnot have permission for this operation"
            },
            {
              "code": 500,
              "reason": "some weird error occurs, possibly due to bug(s)"
            }
          ],
          "httpMethod": "PUT",
          "nickname": "modifyTopologyById",
          "notes": "User can use this operation to deploy or undeploy the topology to cloud. Deploying a topology will launch a set of instance(s) on the cloud(s) and install the required software stack on the instance(s). Undeploying a topology will shutdown the deployed instance(s) on the cloud(s) and cleanup the corresponse resource",
          "parameters": [
            {
              "allowMultiple": false,
              "dataType": "int",
              "description": "The unique id of topology",
              "name": "id",
              "paramType": "path",
              "required": true
            },
            {
              "allowMultiple": false,
              "allowableValues": {
                "valueType": "LIST",
                "values": [
                  "deploy",
                  "rename",
                  "repair",
                  "undeploy",
                  "update_description"
                ]
              },
              "dataType": "string",
              "description": "The operation which the topology is going to be executed with. 'deploy' is to deploy the topology to cloud. 'undeploy' is to undeploy the already deployed topology.",
              "name": "operation",
              "paramType": "query",
              "required": true
            },
            {
              "allowMultiple": false,
              "dataType": "string",
              "description": "The new name. Used in operation 'rename' operation",
              "name": "name",
              "paramType": "query",
              "required": false
            },
            {
              "allowMultiple": false,
              "dataType": "string",
              "description": "The new description of the topology. Used in operation 'update_description' operation",
              "name": "description",
              "paramType": "query",
              "required": false
            }
          ],
          "responseClass": "Topology",
          "summary": "Modify the topology."
        }
      ],
      "path": "/topologies/{id}"
    }
  ],
  "basePath": "<%= request.protocol + request.host_with_port %>/api",
  "models": {
    "Application": {
      "id": "Application",
      "properties": {
        "inServer": {
          "description": "The name of the server which host the application",
          "type": "string"
        },
        "name": {
          "description": "The name of the application",
          "type": "string"
        },
        "url": {
          "description": "The url of the application",
          "type": "string"
        }
      }
    },
    "Database": {
      "id": "Database",
      "properties": {
        "adminPassword": {
          "description": "The password of the database's admin user",
          "type": "string"
        },
        "adminUser": {
          "description": "The admin username of the database",
          "type": "string"
        },
        "host": {
          "description": "The host of the database",
          "type": "string"
        },
        "inServer": {
          "description": "The name of the server which host the database server",
          "type": "string"
        },
        "password": {
          "description": "The password of the database's user",
          "type": "string"
        },
        "system": {
          "allowableValues": {
            "valueType": "LIST",
            "values": [
              "mysql",
              "postgresql"
            ]
          },
          "description": "The database management system",
          "type": "string"
        },
        "user": {
          "description": "The username of the database",
          "type": "string"
        }
      }
    },
    "Deployment": {
      "id": "Deployment",
      "properties": {
        "applications": {
          "description": "The list of applications that being deployed",
          "items": {
            "$ref": "Application"
          },
          "type": "List"
        },
        "databases": {
          "description": "The list of databases that being deployed",
          "items": {
            "$ref": "Database"
          },
          "type": "List"
        },
        "error": {
          "description": "The error message of the deployment",
          "type": "string"
        },
        "message": {
          "description": "The message of the deployment",
          "type": "string"
        },
        "monitoringServers": {
          "description": "The list of monitoring server that being deployed",
          "items": {
            "$ref": "Monitor"
          },
          "type": "List"
        },
        "servers": {
          "description": "The list of nodes that being deployed",
          "items": {
            "$ref": "Server"
          },
          "type": "List"
        },
        "status": {
          "allowableValues": {
            "valueType": "LIST",
            "values": [
              "deployed",
              "deploying",
              "failed",
              "undeployed"
            ]
          },
          "description": "The status of the deployment of topology",
          "type": "string"
        }
      }
    },
    "Monitor": {
      "id": "Monitor",
      "properties": {
        "inServer": {
          "description": "The name of the server which host the monitoring server",
          "type": "string"
        },
        "url": {
          "description": "The url of the monitoring server",
          "type": "string"
        }
      }
    },
    "Server": {
      "id": "Server",
      "properties": {
        "name": {
          "description": "The name of the server",
          "type": "string"
        },
        "serverIp": {
          "description": "The IP address of the server",
          "type": "string"
        },
        "services": {
          "description": "A list of services deployed/deploying to the server",
          "items": {
            "$ref": "string"
          },
          "type": "List"
        },
        "status": {
          "allowableValues": {
            "valueType": "LIST",
            "values": [
              "deployed",
              "deploying",
              "failed",
              "undeployed"
            ]
          },
          "description": "The status of the server",
          "type": "string"
        }
      }
    },
    "Topologies": {
      "id": "Topologies",
      "properties": {
        "all": {
          "description": "The information of the topology",
          "items": {
            "$ref": "Topology"
          },
          "type": "List"
        }
      }
    },
    "Topology": {
      "id": "Topology",
      "properties": {
        "containers": {
          "description": "The list of containers of the topology",
          "items": {
            "$ref": "Container"
          },
          "type": "List"
        },
        "deployment": {
          "description": "The deployment of the topology",
          "type": "Deployment"
        },
        "description": {
          "description": "The description of the topology",
          "type": "string"
        },
        "id": {
          "description": "The id of the topology",
          "type": "int"
        },
        "link": {
          "description": "The link of the topology",
          "type": "string"
        },
        "name": {
          "description": "The name of the topology",
          "type": "string"
        },
        "nodes": {
          "description": "The list of nodes that is not in any containers",
          "items": {
            "$ref": "Node"
          },
          "type": "List"
        },
        "pattern": {
          "description": "The pattern of the topology",
          "type": "string"
        },
        "templates": {
          "description": "The list of templates of the topology",
          "items": {
            "$ref": "Template"
          },
          "type": "List"
        }
      }
    }
  },
  "resourcePath": "/topologies",
  "swaggerVersion": "1.1"
}