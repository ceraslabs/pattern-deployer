{
  "apiVersion": "0.2",
  "apis": [
    {
      "description": "Show a list of nodes definitions",
      "operations": [
        {
          "deprecated": false,
          "errorResponses": [
            {
              "code": 400,
              "reason": "user provided invalid parameter(s)"
            },
            {
              "code": 401,
              "reason": "user haven't logined"
            },
            {
              "code": 403,
              "reason": "user doesnot have permission for this operation"
            },
            {
              "code": 500,
              "reason": "some weird error occurs, possibly due to bug(s)"
            }
          ],
          "httpMethod": "GET",
          "nickname": "get_list_of_nodes",
          "parameters": [
            {
              "allowMultiple": false,
              "dataType": "integer",
              "description": "The unique id of topology that node(s) belongs to",
              "name": "topology_id",
              "paramType": "path",
              "required": true
            }
          ],
          "responseClass": "string",
          "summary": "Show a list of nodes definitions"
        }
      ],
      "path": "/api/topologies/{topology_id}/nodes"
    },
    {
      "description": "Show a list of nodes definitions",
      "operations": [
        {
          "deprecated": false,
          "errorResponses": [
            {
              "code": 400,
              "reason": "user provided invalid parameter(s)"
            },
            {
              "code": 401,
              "reason": "user haven't logined"
            },
            {
              "code": 403,
              "reason": "user doesnot have permission for this operation"
            },
            {
              "code": 500,
              "reason": "some weird error occurs, possibly due to bug(s)"
            }
          ],
          "httpMethod": "GET",
          "nickname": "get_list_of_nodes",
          "parameters": [
            {
              "allowMultiple": false,
              "dataType": "integer",
              "description": "The unique id of topology that node(s) belongs to",
              "name": "topology_id",
              "paramType": "path",
              "required": true
            },
            {
              "allowMultiple": false,
              "dataType": "integer",
              "description": "The unique id of the container that contains the node(s)",
              "name": "container_id",
              "paramType": "path",
              "required": true
            }
          ],
          "responseClass": "string",
          "summary": "Show a list of nodes definitions"
        }
      ],
      "path": "/api/topologies/{topology_id}/containers/{container_id}/nodes"
    },
    {
      "description": "Create a new node definition",
      "operations": [
        {
          "deprecated": false,
          "errorResponses": [
            {
              "code": 400,
              "reason": "user provided invalid parameter(s)"
            },
            {
              "code": 401,
              "reason": "user haven't logined"
            },
            {
              "code": 403,
              "reason": "user doesnot have permission for this operation"
            },
            {
              "code": 500,
              "reason": "some weird error occurs, possibly due to bug(s)"
            }
          ],
          "httpMethod": "POST",
          "nickname": "create_node",
          "notes": "User has options to create the node by name or by definition. If by name, the parameter 'name' need to be filled. If by definition, user need to send the XML document through the 'definition' parameter. Node can have a list of attributes to describe itself. The supported attributes is list below.<h4>Supported attributes</h4><table><thead><tr><th>attribut key</th><th>description</th></tr></thead><tr><td>ssh_user</td><td>The ssh username</td></tr><tr><td>key_pair_id</td><td>The ssh key pair id which is used to create the instance</td></tr><tr><td>cloud</td><td>The cloud this node deploy to. So far, we supported ec2, openstack</td></tr><tr><td>password</td><td>The ssh password</td></tr><tr><td>instance_type</td><td>The type of the instance. For EC2, it can be 't1.micro', 'm1.small', etc. For OpenStack, it is the *ID* of instance flavor(not the name).</td></tr><tr><td>availability_zone</td><td>The Availability Zone. Used in EC2.</td></tr><tr><td>port</td><td>The ssh port. Port 22 will be used if this attribute is not set</td></tr><tr><td>image_id</td><td>The id of the image the node will use</td></tr><tr><td>security_groups</td><td>list of security groups the node is using. Groups are comma-seperated if more than one.</td></tr></table>",
          "parameters": [
            {
              "allowMultiple": false,
              "dataType": "integer",
              "description": "The unique id of topology that created node belongs to",
              "name": "topology_id",
              "paramType": "path",
              "required": true
            },
            {
              "allowMultiple": false,
              "dataType": "string",
              "description": "The XML document that defines the node",
              "name": "definition",
              "paramType": "body",
              "required": false
            },
            {
              "allowMultiple": false,
              "dataType": "string",
              "description": "The name of the node to be created. The name must be unique within topology",
              "name": "name",
              "paramType": "query",
              "required": false
            }
          ],
          "responseClass": "string",
          "summary": "Create a new node definition"
        }
      ],
      "path": "/api/topologies/{topology_id}/nodes"
    },
    {
      "description": "Create a new node definition",
      "operations": [
        {
          "deprecated": false,
          "errorResponses": [
            {
              "code": 400,
              "reason": "user provided invalid parameter(s)"
            },
            {
              "code": 401,
              "reason": "user haven't logined"
            },
            {
              "code": 403,
              "reason": "user doesnot have permission for this operation"
            },
            {
              "code": 500,
              "reason": "some weird error occurs, possibly due to bug(s)"
            }
          ],
          "httpMethod": "POST",
          "nickname": "get_list_of_nodes",
          "notes": "User has options to create the node by name or by definition. If by name, the parameter 'name' need to be filled. If by definition, user need to send the XML document through the 'definition' parameter. Node can have a list of attributes to describe itself. The supported attributes is list below.<h4>Supported attributes</h4><table><thead><tr><th>attribut key</th><th>description</th></tr></thead><tr><td>ssh_user</td><td>The ssh username</td></tr><tr><td>key_pair_id</td><td>The ssh key pair id which is used to create the instance</td></tr><tr><td>cloud</td><td>The cloud this node deploy to. So far, we supported ec2, openstack</td></tr><tr><td>password</td><td>The ssh password</td></tr><tr><td>instance_type</td><td>The type of the instance. For EC2, it can be 't1.micro', 'm1.small', etc. For OpenStack, it is the *ID* of instance flavor(not the name).</td></tr><tr><td>availability_zone</td><td>The Availability Zone. Used in EC2.</td></tr><tr><td>port</td><td>The ssh port. Port 22 will be used if this attribute is not set</td></tr><tr><td>image_id</td><td>The id of the image the node will use</td></tr><tr><td>security_groups</td><td>list of security groups the node is using. Groups are comma-seperated if more than one.</td></tr></table>",
          "parameters": [
            {
              "allowMultiple": false,
              "dataType": "integer",
              "description": "The unique id of topology that created node belongs to",
              "name": "topology_id",
              "paramType": "path",
              "required": true
            },
            {
              "allowMultiple": false,
              "dataType": "integer",
              "description": "The unique id of the container that contains the created node",
              "name": "container_id",
              "paramType": "path",
              "required": true
            },
            {
              "allowMultiple": false,
              "dataType": "string",
              "description": "The XML document that defines the node",
              "name": "definition",
              "paramType": "body",
              "required": false
            },
            {
              "allowMultiple": false,
              "dataType": "string",
              "description": "The name of the node to be created. The name must be unique within topology",
              "name": "name",
              "paramType": "query",
              "required": false
            }
          ],
          "responseClass": "string",
          "summary": "Create a new node definition"
        }
      ],
      "path": "/api/topologies/{topology_id}/containers/{container_id}/nodes"
    },
    {
      "description": "Show a node definition by id",
      "operations": [
        {
          "deprecated": false,
          "errorResponses": [
            {
              "code": 400,
              "reason": "user provided invalid parameter(s)"
            },
            {
              "code": 401,
              "reason": "user haven't logined"
            },
            {
              "code": 403,
              "reason": "user doesnot have permission for this operation"
            },
            {
              "code": 500,
              "reason": "some weird error occurs, possibly due to bug(s)"
            }
          ],
          "httpMethod": "GET",
          "nickname": "get_node_by_id",
          "parameters": [
            {
              "allowMultiple": false,
              "dataType": "integer",
              "description": "The unique id of topology that the node belongs to",
              "name": "topology_id",
              "paramType": "path",
              "required": true
            },
            {
              "allowMultiple": false,
              "dataType": "integer",
              "description": "The unique id of the node",
              "name": "id",
              "paramType": "path",
              "required": true
            }
          ],
          "responseClass": "string",
          "summary": "Show a node definition by id"
        }
      ],
      "path": "/api/topologies/{topology_id}/nodes/{id}"
    },
    {
      "description": "Show a node definition by id",
      "operations": [
        {
          "deprecated": false,
          "errorResponses": [
            {
              "code": 400,
              "reason": "user provided invalid parameter(s)"
            },
            {
              "code": 401,
              "reason": "user haven't logined"
            },
            {
              "code": 403,
              "reason": "user doesnot have permission for this operation"
            },
            {
              "code": 500,
              "reason": "some weird error occurs, possibly due to bug(s)"
            }
          ],
          "httpMethod": "GET",
          "nickname": "get_node_by_id",
          "parameters": [
            {
              "allowMultiple": false,
              "dataType": "integer",
              "description": "The unique id of topology that the node belongs to",
              "name": "topology_id",
              "paramType": "path",
              "required": true
            },
            {
              "allowMultiple": false,
              "dataType": "integer",
              "description": "The unique id of the container that containers the node",
              "name": "container_id",
              "paramType": "path",
              "required": true
            },
            {
              "allowMultiple": false,
              "dataType": "integer",
              "description": "The unique id of the node",
              "name": "id",
              "paramType": "path",
              "required": true
            }
          ],
          "responseClass": "string",
          "summary": "Show a node definition by id"
        }
      ],
      "path": "/api/topologies/{topology_id}/containers/{container_id}/nodes/{id}"
    },
    {
      "description": "Delete the node definition",
      "operations": [
        {
          "deprecated": false,
          "errorResponses": [
            {
              "code": 400,
              "reason": "user provided invalid parameter(s)"
            },
            {
              "code": 401,
              "reason": "user haven't logined"
            },
            {
              "code": 403,
              "reason": "user doesnot have permission for this operation"
            },
            {
              "code": 500,
              "reason": "some weird error occurs, possibly due to bug(s)"
            }
          ],
          "httpMethod": "DELETE",
          "nickname": "delete_node_by_id",
          "parameters": [
            {
              "allowMultiple": false,
              "dataType": "integer",
              "description": "The unique id of topology that node belongs to",
              "name": "topology_id",
              "paramType": "path",
              "required": true
            },
            {
              "allowMultiple": false,
              "dataType": "integer",
              "description": "The unique id of the node",
              "name": "id",
              "paramType": "path",
              "required": true
            }
          ],
          "responseClass": "string",
          "summary": "Delete the node definition"
        }
      ],
      "path": "/api/topologies/{topology_id}/nodes/{id}"
    },
    {
      "description": "Delete the node definition",
      "operations": [
        {
          "deprecated": false,
          "errorResponses": [
            {
              "code": 400,
              "reason": "user provided invalid parameter(s)"
            },
            {
              "code": 401,
              "reason": "user haven't logined"
            },
            {
              "code": 403,
              "reason": "user doesnot have permission for this operation"
            },
            {
              "code": 500,
              "reason": "some weird error occurs, possibly due to bug(s)"
            }
          ],
          "httpMethod": "DELETE",
          "nickname": "delete_node_by_id",
          "parameters": [
            {
              "allowMultiple": false,
              "dataType": "integer",
              "description": "The unique id of topology that node belongs to",
              "name": "topology_id",
              "paramType": "path",
              "required": true
            },
            {
              "allowMultiple": false,
              "dataType": "integer",
              "description": "The unique id of the container that containers the node",
              "name": "container_id",
              "paramType": "path",
              "required": true
            },
            {
              "allowMultiple": false,
              "dataType": "integer",
              "description": "The unique id of the node",
              "name": "id",
              "paramType": "path",
              "required": true
            }
          ],
          "responseClass": "string",
          "summary": "Delete the node definition"
        }
      ],
      "path": "/api/topologies/{topology_id}/containers/{container_id}/nodes/{id}"
    },
    {
      "description": "Modify the definition of the node",
      "operations": [
        {
          "deprecated": false,
          "errorResponses": [
            {
              "code": 400,
              "reason": "user provided invalid parameter(s)"
            },
            {
              "code": 401,
              "reason": "user haven't logined"
            },
            {
              "code": 403,
              "reason": "user doesnot have permission for this operation"
            },
            {
              "code": 500,
              "reason": "some weird error occurs, possibly due to bug(s)"
            }
          ],
          "httpMethod": "PUT",
          "nickname": "modify_node_by_id",
          "notes": "User can rename the node, add/remove template the node is using, or set/remove attributes of the node.<h4>Supported attributes</h4><table><thead><tr><th>attribut key</th><th>description</th></tr></thead><tr><td>ssh_user</td><td>The ssh username</td></tr><tr><td>key_pair_id</td><td>The ssh key pair id which is used to create the instance</td></tr><tr><td>cloud</td><td>The cloud this node deploy to. So far, we supported ec2, openstack</td></tr><tr><td>password</td><td>The ssh password</td></tr><tr><td>instance_type</td><td>The type of the instance. For EC2, it can be 't1.micro', 'm1.small', etc. For OpenStack, it is the *ID* of instance flavor(not the name).</td></tr><tr><td>availability_zone</td><td>The Availability Zone. Used in EC2.</td></tr><tr><td>port</td><td>The ssh port. Port 22 will be used if this attribute is not set</td></tr><tr><td>image_id</td><td>The id of the image the node will use</td></tr><tr><td>security_groups</td><td>list of security groups the node is using. Groups are comma-seperated if more than one.</td></tr></table>",
          "parameters": [
            {
              "allowMultiple": false,
              "dataType": "integer",
              "description": "The unique id of topology that node belongs to",
              "name": "topology_id",
              "paramType": "path",
              "required": true
            },
            {
              "allowMultiple": false,
              "dataType": "integer",
              "description": "The unique id of the node",
              "name": "id",
              "paramType": "path",
              "required": true
            },
            {
              "allowMultiple": false,
              "allowableValues": {
                "valueType": "LIST",
                "values": [
                  "rename",
                  "add_template",
                  "remove_template",
                  "set_attribute",
                  "remove_attribute"
                ]
              },
              "dataType": "string",
              "description": "The operatoin to execute",
              "name": "operation",
              "paramType": "query",
              "required": true
            },
            {
              "allowMultiple": false,
              "dataType": "string",
              "description": "The new name of the node. Used in operation 'rename' operation",
              "name": "name",
              "paramType": "query",
              "required": false
            },
            {
              "allowMultiple": false,
              "dataType": "string",
              "description": "The name of the template to be added/removed. Use in 'add_template' or 'remove_template'",
              "name": "template",
              "paramType": "query",
              "required": false
            },
            {
              "allowMultiple": false,
              "allowableValues": {
                "valueType": "LIST",
                "values": [
                  "ssh_user",
                  "key_pair_id",
                  "cloud",
                  "password",
                  "instance_type",
                  "availability_zone",
                  "port",
                  "image_id",
                  "security_groups"
                ]
              },
              "dataType": "string",
              "description": "The key of the attribute to be set/remove. Use in 'set_attribute' or 'remove_attribute'",
              "name": "attribute_key",
              "paramType": "query",
              "required": false
            },
            {
              "allowMultiple": false,
              "dataType": "string",
              "description": "The value of the attribute to be set. Use in 'set_attribute'",
              "name": "attribute_value",
              "paramType": "query",
              "required": false
            }
          ],
          "responseClass": "string",
          "summary": "Modify the definition of the node"
        }
      ],
      "path": "/api/topologies/{topology_id}/nodes/{id}"
    },
    {
      "description": "Modify the definition of the node",
      "operations": [
        {
          "deprecated": false,
          "errorResponses": [
            {
              "code": 400,
              "reason": "user provided invalid parameter(s)"
            },
            {
              "code": 401,
              "reason": "user haven't logined"
            },
            {
              "code": 403,
              "reason": "user doesnot have permission for this operation"
            },
            {
              "code": 500,
              "reason": "some weird error occurs, possibly due to bug(s)"
            }
          ],
          "httpMethod": "PUT",
          "nickname": "modify_node_by_id",
          "notes": "User can rename the node, add/remove template the node is using, or set/remove attributes of the node.<h4>Supported attributes</h4><table><thead><tr><th>attribut key</th><th>description</th></tr></thead><tr><td>ssh_user</td><td>The ssh username</td></tr><tr><td>key_pair_id</td><td>The ssh key pair id which is used to create the instance</td></tr><tr><td>cloud</td><td>The cloud this node deploy to. So far, we supported ec2, openstack</td></tr><tr><td>password</td><td>The ssh password</td></tr><tr><td>instance_type</td><td>The type of the instance. For EC2, it can be 't1.micro', 'm1.small', etc. For OpenStack, it is the *ID* of instance flavor(not the name).</td></tr><tr><td>availability_zone</td><td>The Availability Zone. Used in EC2.</td></tr><tr><td>port</td><td>The ssh port. Port 22 will be used if this attribute is not set</td></tr><tr><td>image_id</td><td>The id of the image the node will use</td></tr><tr><td>security_groups</td><td>list of security groups the node is using. Groups are comma-seperated if more than one.</td></tr></table>",
          "parameters": [
            {
              "allowMultiple": false,
              "dataType": "integer",
              "description": "The unique id of topology that node belongs to",
              "name": "topology_id",
              "paramType": "path",
              "required": true
            },
            {
              "allowMultiple": false,
              "dataType": "integer",
              "description": "The unique id of the container that containers the node",
              "name": "container_id",
              "paramType": "path",
              "required": true
            },
            {
              "allowMultiple": false,
              "dataType": "integer",
              "description": "The unique id of the node",
              "name": "id",
              "paramType": "path",
              "required": true
            },
            {
              "allowMultiple": false,
              "allowableValues": {
                "valueType": "LIST",
                "values": [
                  "rename",
                  "add_template",
                  "remove_template",
                  "set_attribute",
                  "remove_attribute"
                ]
              },
              "dataType": "string",
              "description": "The operatoin to execute",
              "name": "operation",
              "paramType": "query",
              "required": true
            },
            {
              "allowMultiple": false,
              "dataType": "string",
              "description": "The new name of the node. Used in operation 'rename' operation",
              "name": "name",
              "paramType": "query",
              "required": false
            },
            {
              "allowMultiple": false,
              "dataType": "string",
              "description": "The name of the template to be added/removed. Use in 'add_template' or 'remove_template'",
              "name": "template",
              "paramType": "query",
              "required": false
            },
            {
              "allowMultiple": false,
              "allowableValues": {
                "valueType": "LIST",
                "values": [
                  "ssh_user",
                  "key_pair_id",
                  "cloud",
                  "password",
                  "instance_type",
                  "availability_zone",
                  "port",
                  "image_id",
                  "security_groups"
                ]
              },
              "dataType": "string",
              "description": "The key of the attribute to be set/remove. Use in 'set_attribute' or 'remove_attribute'",
              "name": "attribute_key",
              "paramType": "query",
              "required": false
            },
            {
              "allowMultiple": false,
              "dataType": "string",
              "description": "The value of the attribute to be set. Use in 'set_attribute'",
              "name": "attribute_value",
              "paramType": "query",
              "required": false
            }
          ],
          "responseClass": "string",
          "summary": "Modify the definition of the node"
        }
      ],
      "path": "/api/topologies/{topology_id}/containers/{container_id}/nodes/{id}"
    }
  ],
  "basePath": "<%= request.protocol + request.host_with_port %>",
  "models": {

  },
  "swaggerVersion": "1.1"
}