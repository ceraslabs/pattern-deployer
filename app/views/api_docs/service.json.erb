{
  "apiVersion": "0.2",
  "apis": [
    {
      "description": "Show a list of service definitions",
      "operations": [
        {
          "deprecated": false,
          "errorResponses": [
            {
              "code": 400,
              "reason": "user provided invalid parameter(s)"
            },
            {
              "code": 401,
              "reason": "user haven't logined"
            },
            {
              "code": 403,
              "reason": "user doesnot have permission for this operation"
            },
            {
              "code": 500,
              "reason": "some weird error occurs, possibly due to bug(s)"
            }
          ],
          "httpMethod": "GET",
          "nickname": "getServicesInTemplate",
          "notes": "Show a list of service definitions. In implementation point of view, each service match a set of scripts that will run on deployed instance.",
          "parameters": [
            {
              "allowMultiple": false,
              "dataType": "int",
              "description": "The unique id of topology that service(s) belongs to",
              "name": "topology_id",
              "paramType": "path",
              "required": true
            },
            {
              "allowMultiple": false,
              "dataType": "int",
              "description": "The unique id of template that contains the service(s)",
              "name": "template_id",
              "paramType": "path",
              "required": true
            }
          ],
          "responseClass": "Services",
          "summary": "Show a list of service definitions"
        }
      ],
      "path": "/topologies/{topology_id}/templates/{template_id}/services"
    },
    {
      "description": "Show a list of service definitions",
      "operations": [
        {
          "deprecated": false,
          "errorResponses": [
            {
              "code": 400,
              "reason": "user provided invalid parameter(s)"
            },
            {
              "code": 401,
              "reason": "user haven't logined"
            },
            {
              "code": 403,
              "reason": "user doesnot have permission for this operation"
            },
            {
              "code": 500,
              "reason": "some weird error occurs, possibly due to bug(s)"
            }
          ],
          "httpMethod": "GET",
          "nickname": "getServicesInNode",
          "notes": "Show a list of service definitions. In implementation point of view, each service match a set of scripts that will run on deployed instance.",
          "parameters": [
            {
              "allowMultiple": false,
              "dataType": "int",
              "description": "The unique id of topology that service(s) belongs to",
              "name": "topology_id",
              "paramType": "path",
              "required": true
            },
            {
              "allowMultiple": false,
              "dataType": "int",
              "description": "The unique id of the node that contains the services(s)",
              "name": "node_id",
              "paramType": "path",
              "required": true
            }
          ],
          "responseClass": "Services",
          "summary": "Show a list of service definitions"
        }
      ],
      "path": "/topologies/{topology_id}/nodes/{node_id}/services"
    },
    {
      "description": "Show a list of service definitions",
      "operations": [
        {
          "deprecated": false,
          "errorResponses": [
            {
              "code": 400,
              "reason": "user provided invalid parameter(s)"
            },
            {
              "code": 401,
              "reason": "user haven't logined"
            },
            {
              "code": 403,
              "reason": "user doesnot have permission for this operation"
            },
            {
              "code": 500,
              "reason": "some weird error occurs, possibly due to bug(s)"
            }
          ],
          "httpMethod": "GET",
          "nickname": "getServicesInNode",
          "notes": "Show a list of service definitions. In implementation point of view, each service match a set of scripts that will run on deployed instance.",
          "parameters": [
            {
              "allowMultiple": false,
              "dataType": "int",
              "description": "The unique id of topology that service(s) belongs to",
              "name": "topology_id",
              "paramType": "path",
              "required": true
            },
            {
              "allowMultiple": false,
              "dataType": "int",
              "description": "The unique id of the container that the service(s) belong to",
              "name": "container_id",
              "paramType": "path",
              "required": true
            },
            {
              "allowMultiple": false,
              "dataType": "int",
              "description": "The unique id of the node that contains the services(s)",
              "name": "node_id",
              "paramType": "path",
              "required": true
            }
          ],
          "responseClass": "Services",
          "summary": "Show a list of service definitions"
        }
      ],
      "path": "/topologies/{topology_id}/containers/{container_id}/nodes/{node_id}/services"
    },
    {
      "description": "Create a service node definition",
      "operations": [
        {
          "deprecated": false,
          "errorResponses": [
            {
              "code": 400,
              "reason": "user provided invalid parameter(s)"
            },
            {
              "code": 401,
              "reason": "user haven't logined"
            },
            {
              "code": 403,
              "reason": "user doesnot have permission for this operation"
            },
            {
              "code": 500,
              "reason": "some weird error occurs, possibly due to bug(s)"
            }
          ],
          "httpMethod": "POST",
          "nickname": "createServiceInTemplate",
          "notes": "Users can create a service by providing an XML document or just providing the name. The services available so far is list below<h4>Available services</h4><table><thead><tr><th>attribut key</th><th>description</th></tr></thead><tr><td>client_installation</td><td>Install client coponents of this application, an installed server is required</td></tr><tr><td>database_server</td><td>Install an MySQL database server</td></tr><tr><td>dns_client</td><td>Config server as members of load balancing dns. The dns will despatch requests to its members for load balacing purpose. (Prerequisites: supporting services 'dns' must be enabled)</td></tr><tr><td>openvpn_client</td><td>Config server as an openvpn client(Prerequisites: supporting services 'openvpn' must be enabled)</td></tr><tr><td>openvpn_server</td><td>Config server as an openvpn server(Prerequisites: supporting services 'openvpn' must be enabled)</td></tr><tr><td>ossec_client</td><td>Config server to use the services from ossec, which is an host-base protection system. (Prerequisites: supporting services 'host_protection' must be enabled)</td></tr><tr><td>server_installation</td><td>Install server components of this application, which is actually a Chef server</td></tr><tr><td>snort</td><td>Config server as snort node for network instrusion prevention</td></tr><tr><td>snort_prepost</td><td>Config server to connect to snort node</td></tr><tr><td>standalone_installation</td><td>Install this application without a server</td></tr><tr><td>virsh</td><td>Install an virtual machine, which allow nested instance on top of existing instance</td></tr><tr><td>web_balancer</td><td>Install Apache and enable its load balancing modules</td></tr><tr><td>web_server</td><td>Install an Tomcat6 application server</td></tr><tr><td>xcamp_monitoring_agent</td><td>Install an Ganglia monitoring daemon(gmond), which will collect and share various performance metric of this server</td></tr><tr><td>xcamp_monitoring_server</td><td>Install an Ganglia meta deamon(gmetad) and Ganglia web frontend, which present the collected performance metric to users</td></tr></table>",
          "parameters": [
            {
              "allowMultiple": false,
              "dataType": "int",
              "description": "The unique id of topology that the created service belongs to",
              "name": "topology_id",
              "paramType": "path",
              "required": true
            },
            {
              "allowMultiple": false,
              "dataType": "int",
              "description": "The unique id of template that contains the created service",
              "name": "template_id",
              "paramType": "path",
              "required": true
            },
            {
              "allowMultiple": false,
              "allowableValues": {
                "valueType": "LIST",
                "values": [
                  "client_installation",
                  "database_server",
                  "dns_client",
                  "openvpn_client",
                  "openvpn_server",
                  "ossec_client",
                  "server_installation",
                  "snort",
                  "snort_prepost",
                  "standalone_installation",
                  "virsh",
                  "web_balancer",
                  "web_server",
                  "xcamp_monitoring_agent",
                  "xcamp_monitoring_server"
                ]
              },
              "dataType": "string",
              "description": "The new name of the service. Used in operation 'rename' operation",
              "name": "name",
              "paramType": "query",
              "required": false
            },
            {
              "allowMultiple": false,
              "dataType": "string",
              "description": "An XML document that describe the new service. Use in 'redefine'",
              "name": "definition",
              "paramType": "body",
              "required": false
            }
          ],
          "responseClass": "Service",
          "summary": "Create a service node definition"
        }
      ],
      "path": "/topologies/{topology_id}/templates/{template_id}/services"
    },
    {
      "description": "Create a service node definition",
      "operations": [
        {
          "deprecated": false,
          "errorResponses": [
            {
              "code": 400,
              "reason": "user provided invalid parameter(s)"
            },
            {
              "code": 401,
              "reason": "user haven't logined"
            },
            {
              "code": 403,
              "reason": "user doesnot have permission for this operation"
            },
            {
              "code": 500,
              "reason": "some weird error occurs, possibly due to bug(s)"
            }
          ],
          "httpMethod": "POST",
          "nickname": "createServiceInNode",
          "notes": "Users can create a service by providing an XML document or just providing the name. The services available so far is list below<h4>Available services</h4><table><thead><tr><th>attribut key</th><th>description</th></tr></thead><tr><td>client_installation</td><td>Install client coponents of this application, an installed server is required</td></tr><tr><td>database_server</td><td>Install an MySQL database server</td></tr><tr><td>dns_client</td><td>Config server as members of load balancing dns. The dns will despatch requests to its members for load balacing purpose. (Prerequisites: supporting services 'dns' must be enabled)</td></tr><tr><td>openvpn_client</td><td>Config server as an openvpn client(Prerequisites: supporting services 'openvpn' must be enabled)</td></tr><tr><td>openvpn_server</td><td>Config server as an openvpn server(Prerequisites: supporting services 'openvpn' must be enabled)</td></tr><tr><td>ossec_client</td><td>Config server to use the services from ossec, which is an host-base protection system. (Prerequisites: supporting services 'host_protection' must be enabled)</td></tr><tr><td>server_installation</td><td>Install server components of this application, which is actually a Chef server</td></tr><tr><td>snort</td><td>Config server as snort node for network instrusion prevention</td></tr><tr><td>snort_prepost</td><td>Config server to connect to snort node</td></tr><tr><td>standalone_installation</td><td>Install this application without a server</td></tr><tr><td>virsh</td><td>Install an virtual machine, which allow nested instance on top of existing instance</td></tr><tr><td>web_balancer</td><td>Install Apache and enable its load balancing modules</td></tr><tr><td>web_server</td><td>Install an Tomcat6 application server</td></tr><tr><td>xcamp_monitoring_agent</td><td>Install an Ganglia monitoring daemon(gmond), which will collect and share various performance metric of this server</td></tr><tr><td>xcamp_monitoring_server</td><td>Install an Ganglia meta deamon(gmetad) and Ganglia web frontend, which present the collected performance metric to users</td></tr></table>",
          "parameters": [
            {
              "allowMultiple": false,
              "dataType": "int",
              "description": "The unique id of topology that the created service belongs to",
              "name": "topology_id",
              "paramType": "path",
              "required": true
            },
            {
              "allowMultiple": false,
              "dataType": "int",
              "description": "The unique id of the node that contains the created service",
              "name": "node_id",
              "paramType": "path",
              "required": true
            },
            {
              "allowMultiple": false,
              "allowableValues": {
                "valueType": "LIST",
                "values": [
                  "client_installation",
                  "database_server",
                  "dns_client",
                  "openvpn_client",
                  "openvpn_server",
                  "ossec_client",
                  "server_installation",
                  "snort",
                  "snort_prepost",
                  "standalone_installation",
                  "virsh",
                  "web_balancer",
                  "web_server",
                  "xcamp_monitoring_agent",
                  "xcamp_monitoring_server"
                ]
              },
              "dataType": "string",
              "description": "The new name of the service. Used in operation 'rename' operation",
              "name": "name",
              "paramType": "query",
              "required": false
            },
            {
              "allowMultiple": false,
              "dataType": "string",
              "description": "An XML document that describe the new service. Use in 'redefine'",
              "name": "definition",
              "paramType": "body",
              "required": false
            }
          ],
          "responseClass": "Service",
          "summary": "Create a service node definition"
        }
      ],
      "path": "/topologies/{topology_id}/nodes/{node_id}/services"
    },
    {
      "description": "Create a service node definition",
      "operations": [
        {
          "deprecated": false,
          "errorResponses": [
            {
              "code": 400,
              "reason": "user provided invalid parameter(s)"
            },
            {
              "code": 401,
              "reason": "user haven't logined"
            },
            {
              "code": 403,
              "reason": "user doesnot have permission for this operation"
            },
            {
              "code": 500,
              "reason": "some weird error occurs, possibly due to bug(s)"
            }
          ],
          "httpMethod": "POST",
          "nickname": "createServiceInNode",
          "notes": "Users can create a service by providing an XML document or just providing the name. The services available so far is list below<h4>Available services</h4><table><thead><tr><th>attribut key</th><th>description</th></tr></thead><tr><td>client_installation</td><td>Install client coponents of this application, an installed server is required</td></tr><tr><td>database_server</td><td>Install an MySQL database server</td></tr><tr><td>dns_client</td><td>Config server as members of load balancing dns. The dns will despatch requests to its members for load balacing purpose. (Prerequisites: supporting services 'dns' must be enabled)</td></tr><tr><td>openvpn_client</td><td>Config server as an openvpn client(Prerequisites: supporting services 'openvpn' must be enabled)</td></tr><tr><td>openvpn_server</td><td>Config server as an openvpn server(Prerequisites: supporting services 'openvpn' must be enabled)</td></tr><tr><td>ossec_client</td><td>Config server to use the services from ossec, which is an host-base protection system. (Prerequisites: supporting services 'host_protection' must be enabled)</td></tr><tr><td>server_installation</td><td>Install server components of this application, which is actually a Chef server</td></tr><tr><td>snort</td><td>Config server as snort node for network instrusion prevention</td></tr><tr><td>snort_prepost</td><td>Config server to connect to snort node</td></tr><tr><td>standalone_installation</td><td>Install this application without a server</td></tr><tr><td>virsh</td><td>Install an virtual machine, which allow nested instance on top of existing instance</td></tr><tr><td>web_balancer</td><td>Install Apache and enable its load balancing modules</td></tr><tr><td>web_server</td><td>Install an Tomcat6 application server</td></tr><tr><td>xcamp_monitoring_agent</td><td>Install an Ganglia monitoring daemon(gmond), which will collect and share various performance metric of this server</td></tr><tr><td>xcamp_monitoring_server</td><td>Install an Ganglia meta deamon(gmetad) and Ganglia web frontend, which present the collected performance metric to users</td></tr></table>",
          "parameters": [
            {
              "allowMultiple": false,
              "dataType": "int",
              "description": "The unique id of topology that the created service belongs to",
              "name": "topology_id",
              "paramType": "path",
              "required": true
            },
            {
              "allowMultiple": false,
              "dataType": "int",
              "description": "The unique id of the container that the service(s) belong to",
              "name": "container_id",
              "paramType": "path",
              "required": true
            },
            {
              "allowMultiple": false,
              "dataType": "int",
              "description": "The unique id of the node that contains the created service",
              "name": "node_id",
              "paramType": "path",
              "required": true
            },
            {
              "allowMultiple": false,
              "allowableValues": {
                "valueType": "LIST",
                "values": [
                  "client_installation",
                  "database_server",
                  "dns_client",
                  "openvpn_client",
                  "openvpn_server",
                  "ossec_client",
                  "server_installation",
                  "snort",
                  "snort_prepost",
                  "standalone_installation",
                  "virsh",
                  "web_balancer",
                  "web_server",
                  "xcamp_monitoring_agent",
                  "xcamp_monitoring_server"
                ]
              },
              "dataType": "string",
              "description": "The new name of the service. Used in operation 'rename' operation",
              "name": "name",
              "paramType": "query",
              "required": false
            },
            {
              "allowMultiple": false,
              "dataType": "string",
              "description": "An XML document that describe the new service. Use in 'redefine'",
              "name": "definition",
              "paramType": "body",
              "required": false
            }
          ],
          "responseClass": "Service",
          "summary": "Create a service node definition"
        }
      ],
      "path": "/topologies/{topology_id}/containers/{container_id}/nodes/{node_id}/services"
    },
    {
      "description": "Show a list of service definitions",
      "operations": [
        {
          "deprecated": false,
          "errorResponses": [
            {
              "code": 400,
              "reason": "user provided invalid parameter(s)"
            },
            {
              "code": 401,
              "reason": "user haven't logined"
            },
            {
              "code": 403,
              "reason": "user doesnot have permission for this operation"
            },
            {
              "code": 500,
              "reason": "some weird error occurs, possibly due to bug(s)"
            }
          ],
          "httpMethod": "GET",
          "nickname": "getServiceInTemplateById",
          "notes": "Show a list of service definitions. In implementation point of view, each service match a set of scripts that will run on deployed instance.",
          "parameters": [
            {
              "allowMultiple": false,
              "dataType": "int",
              "description": "The unique id of topology that service(s) belongs to",
              "name": "topology_id",
              "paramType": "path",
              "required": true
            },
            {
              "allowMultiple": false,
              "dataType": "int",
              "description": "The unique id of template that contains the service(s)",
              "name": "template_id",
              "paramType": "path",
              "required": true
            },
            {
              "allowMultiple": false,
              "dataType": "int",
              "description": "The unique id of the service",
              "name": "id",
              "paramType": "path",
              "required": true
            }
          ],
          "responseClass": "Service",
          "summary": "Show a list of service definitions"
        }
      ],
      "path": "/topologies/{topology_id}/templates/{template_id}/services/{id}"
    },
    {
      "description": "Show a list of service definitions",
      "operations": [
        {
          "deprecated": false,
          "errorResponses": [
            {
              "code": 400,
              "reason": "user provided invalid parameter(s)"
            },
            {
              "code": 401,
              "reason": "user haven't logined"
            },
            {
              "code": 403,
              "reason": "user doesnot have permission for this operation"
            },
            {
              "code": 500,
              "reason": "some weird error occurs, possibly due to bug(s)"
            }
          ],
          "httpMethod": "GET",
          "nickname": "getServiceInNodeById",
          "notes": "Show a list of service definitions. In implementation point of view, each service match a set of scripts that will run on deployed instance.",
          "parameters": [
            {
              "allowMultiple": false,
              "dataType": "int",
              "description": "The unique id of topology that service(s) belongs to",
              "name": "topology_id",
              "paramType": "path",
              "required": true
            },
            {
              "allowMultiple": false,
              "dataType": "int",
              "description": "The unique id of the node that contains the created service",
              "name": "node_id",
              "paramType": "path",
              "required": true
            },
            {
              "allowMultiple": false,
              "dataType": "int",
              "description": "The unique id of the service",
              "name": "id",
              "paramType": "path",
              "required": true
            }
          ],
          "responseClass": "Service",
          "summary": "Show a list of service definitions"
        }
      ],
      "path": "/topologies/{topology_id}/nodes/{node_id}/services/{id}"
    },
    {
      "description": "Show a list of service definitions",
      "operations": [
        {
          "deprecated": false,
          "errorResponses": [
            {
              "code": 400,
              "reason": "user provided invalid parameter(s)"
            },
            {
              "code": 401,
              "reason": "user haven't logined"
            },
            {
              "code": 403,
              "reason": "user doesnot have permission for this operation"
            },
            {
              "code": 500,
              "reason": "some weird error occurs, possibly due to bug(s)"
            }
          ],
          "httpMethod": "GET",
          "nickname": "getServiceInNodeById",
          "notes": "Show a list of service definitions. In implementation point of view, each service match a set of scripts that will run on deployed instance.",
          "parameters": [
            {
              "allowMultiple": false,
              "dataType": "int",
              "description": "The unique id of topology that service(s) belongs to",
              "name": "topology_id",
              "paramType": "path",
              "required": true
            },
            {
              "allowMultiple": false,
              "dataType": "int",
              "description": "The unique id of the container that the service(s) belong to",
              "name": "container_id",
              "paramType": "path",
              "required": true
            },
            {
              "allowMultiple": false,
              "dataType": "int",
              "description": "The unique id of the node that contains the created service",
              "name": "node_id",
              "paramType": "path",
              "required": true
            },
            {
              "allowMultiple": false,
              "dataType": "int",
              "description": "The unique id of the service",
              "name": "id",
              "paramType": "path",
              "required": true
            }
          ],
          "responseClass": "Service",
          "summary": "Show a list of service definitions"
        }
      ],
      "path": "/topologies/{topology_id}/containers/{container_id}/nodes/{node_id}/services/{id}"
    },
    {
      "description": "Delete the service definition",
      "operations": [
        {
          "deprecated": false,
          "errorResponses": [
            {
              "code": 400,
              "reason": "user provided invalid parameter(s)"
            },
            {
              "code": 401,
              "reason": "user haven't logined"
            },
            {
              "code": 403,
              "reason": "user doesnot have permission for this operation"
            },
            {
              "code": 500,
              "reason": "some weird error occurs, possibly due to bug(s)"
            }
          ],
          "httpMethod": "DELETE",
          "nickname": "deleteServiceInTemplateById",
          "parameters": [
            {
              "allowMultiple": false,
              "dataType": "int",
              "description": "The unique id of topology that service(s) belongs to",
              "name": "topology_id",
              "paramType": "path",
              "required": true
            },
            {
              "allowMultiple": false,
              "dataType": "int",
              "description": "The unique id of template that contains the service(s)",
              "name": "template_id",
              "paramType": "path",
              "required": true
            },
            {
              "allowMultiple": false,
              "dataType": "int",
              "description": "The unique id of the service",
              "name": "id",
              "paramType": "path",
              "required": true
            }
          ],
          "responseClass": "Services",
          "summary": "Delete the service definition"
        }
      ],
      "path": "/topologies/{topology_id}/templates/{template_id}/services/{id}"
    },
    {
      "description": "Delete the service definition",
      "operations": [
        {
          "deprecated": false,
          "errorResponses": [
            {
              "code": 400,
              "reason": "user provided invalid parameter(s)"
            },
            {
              "code": 401,
              "reason": "user haven't logined"
            },
            {
              "code": 403,
              "reason": "user doesnot have permission for this operation"
            },
            {
              "code": 500,
              "reason": "some weird error occurs, possibly due to bug(s)"
            }
          ],
          "httpMethod": "DELETE",
          "nickname": "deleteServiceInNodeById",
          "parameters": [
            {
              "allowMultiple": false,
              "dataType": "int",
              "description": "The unique id of topology that service(s) belongs to",
              "name": "topology_id",
              "paramType": "path",
              "required": true
            },
            {
              "allowMultiple": false,
              "dataType": "int",
              "description": "The unique id of the node that contains the service",
              "name": "node_id",
              "paramType": "path",
              "required": true
            },
            {
              "allowMultiple": false,
              "dataType": "int",
              "description": "The unique id of the service",
              "name": "id",
              "paramType": "path",
              "required": true
            }
          ],
          "responseClass": "Services",
          "summary": "Delete the service definition"
        }
      ],
      "path": "/topologies/{topology_id}/nodes/{node_id}/services/{id}"
    },
    {
      "description": "Delete the service definition",
      "operations": [
        {
          "deprecated": false,
          "errorResponses": [
            {
              "code": 400,
              "reason": "user provided invalid parameter(s)"
            },
            {
              "code": 401,
              "reason": "user haven't logined"
            },
            {
              "code": 403,
              "reason": "user doesnot have permission for this operation"
            },
            {
              "code": 500,
              "reason": "some weird error occurs, possibly due to bug(s)"
            }
          ],
          "httpMethod": "DELETE",
          "nickname": "deleteServiceInNodeById",
          "parameters": [
            {
              "allowMultiple": false,
              "dataType": "int",
              "description": "The unique id of topology that service(s) belongs to",
              "name": "topology_id",
              "paramType": "path",
              "required": true
            },
            {
              "allowMultiple": false,
              "dataType": "int",
              "description": "The unique id of the container that the service belong to",
              "name": "container_id",
              "paramType": "path",
              "required": true
            },
            {
              "allowMultiple": false,
              "dataType": "int",
              "description": "The unique id of the node that contains the service",
              "name": "node_id",
              "paramType": "path",
              "required": true
            },
            {
              "allowMultiple": false,
              "dataType": "int",
              "description": "The unique id of the service",
              "name": "id",
              "paramType": "path",
              "required": true
            }
          ],
          "responseClass": "Services",
          "summary": "Delete the service definition"
        }
      ],
      "path": "/topologies/{topology_id}/containers/{container_id}/nodes/{node_id}/services/{id}"
    },
    {
      "description": "Modify the service definition",
      "operations": [
        {
          "deprecated": false,
          "errorResponses": [
            {
              "code": 400,
              "reason": "user provided invalid parameter(s)"
            },
            {
              "code": 401,
              "reason": "user haven't logined"
            },
            {
              "code": 403,
              "reason": "user doesnot have permission for this operation"
            },
            {
              "code": 500,
              "reason": "some weird error occurs, possibly due to bug(s)"
            }
          ],
          "httpMethod": "PUT",
          "nickname": "modifyServiceInTemplateById",
          "notes": "User can 'rename' or 'redefine' the service. If redefine, user needs to provide a new XML document as service definition.<h4>Available services</h4><table><thead><tr><th>attribut key</th><th>description</th></tr></thead><tr><td>client_installation</td><td>Install client coponents of this application, an installed server is required</td></tr><tr><td>database_server</td><td>Install an MySQL database server</td></tr><tr><td>dns_client</td><td>Config server as members of load balancing dns. The dns will despatch requests to its members for load balacing purpose. (Prerequisites: supporting services 'dns' must be enabled)</td></tr><tr><td>openvpn_client</td><td>Config server as an openvpn client(Prerequisites: supporting services 'openvpn' must be enabled)</td></tr><tr><td>openvpn_server</td><td>Config server as an openvpn server(Prerequisites: supporting services 'openvpn' must be enabled)</td></tr><tr><td>ossec_client</td><td>Config server to use the services from ossec, which is an host-base protection system. (Prerequisites: supporting services 'host_protection' must be enabled)</td></tr><tr><td>server_installation</td><td>Install server components of this application, which is actually a Chef server</td></tr><tr><td>snort</td><td>Config server as snort node for network instrusion prevention</td></tr><tr><td>snort_prepost</td><td>Config server to connect to snort node</td></tr><tr><td>standalone_installation</td><td>Install this application without a server</td></tr><tr><td>virsh</td><td>Install an virtual machine, which allow nested instance on top of existing instance</td></tr><tr><td>web_balancer</td><td>Install Apache and enable its load balancing modules</td></tr><tr><td>web_server</td><td>Install an Tomcat6 application server</td></tr><tr><td>xcamp_monitoring_agent</td><td>Install an Ganglia monitoring daemon(gmond), which will collect and share various performance metric of this server</td></tr><tr><td>xcamp_monitoring_server</td><td>Install an Ganglia meta deamon(gmetad) and Ganglia web frontend, which present the collected performance metric to users</td></tr></table>",
          "parameters": [
            {
              "allowMultiple": false,
              "dataType": "int",
              "description": "The unique id of topology that service(s) belongs to",
              "name": "topology_id",
              "paramType": "path",
              "required": true
            },
            {
              "allowMultiple": false,
              "dataType": "int",
              "description": "The unique id of template that contains the service(s)",
              "name": "template_id",
              "paramType": "path",
              "required": true
            },
            {
              "allowMultiple": false,
              "dataType": "int",
              "description": "The unique id of the service",
              "name": "id",
              "paramType": "path",
              "required": true
            },
            {
              "allowMultiple": false,
              "allowableValues": {
                "valueType": "LIST",
                "values": [
                  "redefine",
                  "rename"
                ]
              },
              "dataType": "string",
              "description": "The operatoin to execute",
              "name": "operation",
              "paramType": "query",
              "required": true
            },
            {
              "allowMultiple": false,
              "allowableValues": {
                "valueType": "LIST",
                "values": [
                  "client_installation",
                  "database_server",
                  "dns_client",
                  "openvpn_client",
                  "openvpn_server",
                  "ossec_client",
                  "server_installation",
                  "snort",
                  "snort_prepost",
                  "standalone_installation",
                  "virsh",
                  "web_balancer",
                  "web_server",
                  "xcamp_monitoring_agent",
                  "xcamp_monitoring_server"
                ]
              },
              "dataType": "string",
              "description": "The new name of the service. Used in operation 'rename' operation",
              "name": "name",
              "paramType": "query",
              "required": false
            },
            {
              "allowMultiple": false,
              "dataType": "string",
              "description": "An XML document that describe the new service. Use in 'redefine'",
              "name": "definition",
              "paramType": "body",
              "required": false
            }
          ],
          "responseClass": "Service",
          "summary": "Modify the service definition"
        }
      ],
      "path": "/topologies/{topology_id}/templates/{template_id}/services/{id}"
    },
    {
      "description": "Modify the service definition",
      "operations": [
        {
          "deprecated": false,
          "errorResponses": [
            {
              "code": 400,
              "reason": "user provided invalid parameter(s)"
            },
            {
              "code": 401,
              "reason": "user haven't logined"
            },
            {
              "code": 403,
              "reason": "user doesnot have permission for this operation"
            },
            {
              "code": 500,
              "reason": "some weird error occurs, possibly due to bug(s)"
            }
          ],
          "httpMethod": "PUT",
          "nickname": "modifyServiceInNodeById",
          "notes": "User can 'rename' or 'redefine' the service. If redefine, user needs to provide a new XML document as service definition.<h4>Available services</h4><table><thead><tr><th>attribut key</th><th>description</th></tr></thead><tr><td>client_installation</td><td>Install client coponents of this application, an installed server is required</td></tr><tr><td>database_server</td><td>Install an MySQL database server</td></tr><tr><td>dns_client</td><td>Config server as members of load balancing dns. The dns will despatch requests to its members for load balacing purpose. (Prerequisites: supporting services 'dns' must be enabled)</td></tr><tr><td>openvpn_client</td><td>Config server as an openvpn client(Prerequisites: supporting services 'openvpn' must be enabled)</td></tr><tr><td>openvpn_server</td><td>Config server as an openvpn server(Prerequisites: supporting services 'openvpn' must be enabled)</td></tr><tr><td>ossec_client</td><td>Config server to use the services from ossec, which is an host-base protection system. (Prerequisites: supporting services 'host_protection' must be enabled)</td></tr><tr><td>server_installation</td><td>Install server components of this application, which is actually a Chef server</td></tr><tr><td>snort</td><td>Config server as snort node for network instrusion prevention</td></tr><tr><td>snort_prepost</td><td>Config server to connect to snort node</td></tr><tr><td>standalone_installation</td><td>Install this application without a server</td></tr><tr><td>virsh</td><td>Install an virtual machine, which allow nested instance on top of existing instance</td></tr><tr><td>web_balancer</td><td>Install Apache and enable its load balancing modules</td></tr><tr><td>web_server</td><td>Install an Tomcat6 application server</td></tr><tr><td>xcamp_monitoring_agent</td><td>Install an Ganglia monitoring daemon(gmond), which will collect and share various performance metric of this server</td></tr><tr><td>xcamp_monitoring_server</td><td>Install an Ganglia meta deamon(gmetad) and Ganglia web frontend, which present the collected performance metric to users</td></tr></table>",
          "parameters": [
            {
              "allowMultiple": false,
              "dataType": "int",
              "description": "The unique id of topology that service(s) belongs to",
              "name": "topology_id",
              "paramType": "path",
              "required": true
            },
            {
              "allowMultiple": false,
              "dataType": "int",
              "description": "The unique id of the node that contains the service",
              "name": "node_id",
              "paramType": "path",
              "required": true
            },
            {
              "allowMultiple": false,
              "dataType": "int",
              "description": "The unique id of the service",
              "name": "id",
              "paramType": "path",
              "required": true
            },
            {
              "allowMultiple": false,
              "allowableValues": {
                "valueType": "LIST",
                "values": [
                  "redefine",
                  "rename"
                ]
              },
              "dataType": "string",
              "description": "The operatoin to execute",
              "name": "operation",
              "paramType": "query",
              "required": true
            },
            {
              "allowMultiple": false,
              "allowableValues": {
                "valueType": "LIST",
                "values": [
                  "client_installation",
                  "database_server",
                  "dns_client",
                  "openvpn_client",
                  "openvpn_server",
                  "ossec_client",
                  "server_installation",
                  "snort",
                  "snort_prepost",
                  "standalone_installation",
                  "virsh",
                  "web_balancer",
                  "web_server",
                  "xcamp_monitoring_agent",
                  "xcamp_monitoring_server"
                ]
              },
              "dataType": "string",
              "description": "The new name of the service. Used in operation 'rename' operation",
              "name": "name",
              "paramType": "query",
              "required": false
            },
            {
              "allowMultiple": false,
              "dataType": "string",
              "description": "An XML document that describe the new service. Use in 'redefine'",
              "name": "definition",
              "paramType": "body",
              "required": false
            }
          ],
          "responseClass": "Service",
          "summary": "Modify the service definition"
        }
      ],
      "path": "/topologies/{topology_id}/nodes/{node_id}/services/{id}"
    },
    {
      "description": "Modify the service definition",
      "operations": [
        {
          "deprecated": false,
          "errorResponses": [
            {
              "code": 400,
              "reason": "user provided invalid parameter(s)"
            },
            {
              "code": 401,
              "reason": "user haven't logined"
            },
            {
              "code": 403,
              "reason": "user doesnot have permission for this operation"
            },
            {
              "code": 500,
              "reason": "some weird error occurs, possibly due to bug(s)"
            }
          ],
          "httpMethod": "PUT",
          "nickname": "modifyServiceInNodeById",
          "notes": "User can 'rename' or 'redefine' the service. If redefine, user needs to provide a new XML document as service definition.<h4>Available services</h4><table><thead><tr><th>attribut key</th><th>description</th></tr></thead><tr><td>client_installation</td><td>Install client coponents of this application, an installed server is required</td></tr><tr><td>database_server</td><td>Install an MySQL database server</td></tr><tr><td>dns_client</td><td>Config server as members of load balancing dns. The dns will despatch requests to its members for load balacing purpose. (Prerequisites: supporting services 'dns' must be enabled)</td></tr><tr><td>openvpn_client</td><td>Config server as an openvpn client(Prerequisites: supporting services 'openvpn' must be enabled)</td></tr><tr><td>openvpn_server</td><td>Config server as an openvpn server(Prerequisites: supporting services 'openvpn' must be enabled)</td></tr><tr><td>ossec_client</td><td>Config server to use the services from ossec, which is an host-base protection system. (Prerequisites: supporting services 'host_protection' must be enabled)</td></tr><tr><td>server_installation</td><td>Install server components of this application, which is actually a Chef server</td></tr><tr><td>snort</td><td>Config server as snort node for network instrusion prevention</td></tr><tr><td>snort_prepost</td><td>Config server to connect to snort node</td></tr><tr><td>standalone_installation</td><td>Install this application without a server</td></tr><tr><td>virsh</td><td>Install an virtual machine, which allow nested instance on top of existing instance</td></tr><tr><td>web_balancer</td><td>Install Apache and enable its load balancing modules</td></tr><tr><td>web_server</td><td>Install an Tomcat6 application server</td></tr><tr><td>xcamp_monitoring_agent</td><td>Install an Ganglia monitoring daemon(gmond), which will collect and share various performance metric of this server</td></tr><tr><td>xcamp_monitoring_server</td><td>Install an Ganglia meta deamon(gmetad) and Ganglia web frontend, which present the collected performance metric to users</td></tr></table>",
          "parameters": [
            {
              "allowMultiple": false,
              "dataType": "int",
              "description": "The unique id of topology that service(s) belongs to",
              "name": "topology_id",
              "paramType": "path",
              "required": true
            },
            {
              "allowMultiple": false,
              "dataType": "int",
              "description": "The unique id of the container that the service belong to",
              "name": "container_id",
              "paramType": "path",
              "required": true
            },
            {
              "allowMultiple": false,
              "dataType": "int",
              "description": "The unique id of the node that contains the service",
              "name": "node_id",
              "paramType": "path",
              "required": true
            },
            {
              "allowMultiple": false,
              "dataType": "int",
              "description": "The unique id of the service",
              "name": "id",
              "paramType": "path",
              "required": true
            },
            {
              "allowMultiple": false,
              "allowableValues": {
                "valueType": "LIST",
                "values": [
                  "redefine",
                  "rename"
                ]
              },
              "dataType": "string",
              "description": "The operatoin to execute",
              "name": "operation",
              "paramType": "query",
              "required": true
            },
            {
              "allowMultiple": false,
              "allowableValues": {
                "valueType": "LIST",
                "values": [
                  "client_installation",
                  "database_server",
                  "dns_client",
                  "openvpn_client",
                  "openvpn_server",
                  "ossec_client",
                  "server_installation",
                  "snort",
                  "snort_prepost",
                  "standalone_installation",
                  "virsh",
                  "web_balancer",
                  "web_server",
                  "xcamp_monitoring_agent",
                  "xcamp_monitoring_server"
                ]
              },
              "dataType": "string",
              "description": "The new name of the service. Used in operation 'rename' operation",
              "name": "name",
              "paramType": "query",
              "required": false
            },
            {
              "allowMultiple": false,
              "dataType": "string",
              "description": "An XML document that describe the new service. Use in 'redefine'",
              "name": "definition",
              "paramType": "body",
              "required": false
            }
          ],
          "responseClass": "Service",
          "summary": "Modify the service definition"
        }
      ],
      "path": "/topologies/{topology_id}/containers/{container_id}/nodes/{node_id}/services/{id}"
    }
  ],
  "basePath": "<%= request.protocol + request.host_with_port %>/api",
  "models": {
    "Service": {
      "id": "Service",
      "properties": {
        "id": {
          "description": "The id of the service",
          "type": "int"
        },
        "link": {
          "description": "The link of the service",
          "type": "string"
        },
        "name": {
          "allowableValues": {
            "valueType": "LIST",
            "values": [
              "client_installation",
              "database_server",
              "dns_client",
              "openvpn_client",
              "openvpn_server",
              "ossec_client",
              "server_installation",
              "snort",
              "snort_prepost",
              "standalone_installation",
              "virsh",
              "web_balancer",
              "web_server",
              "xcamp_monitoring_agent",
              "xcamp_monitoring_server"
            ]
          },
          "description": "The name of the service",
          "type": "string"
        },
        "pattern": {
          "description": "The pattern of the service",
          "type": "string"
        }
      }
    },
    "Services": {
      "id": "Services",
      "properties": {
        "all": {
          "description": "The information of the services",
          "items": {
            "$ref": "Service"
          },
          "type": "List"
        }
      }
    }
  },
  "resourcePath": "/topologies/{topology_id}/nodes/{node_id}/services",
  "swaggerVersion": "1.1"
}